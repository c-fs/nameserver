// Code generated by protoc-gen-go.
// source: name.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	name.proto

It has these top-level messages:
	FetchDisksRequest
	FetchDisksReply
	DiskInfo
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type FetchDisksRequest struct {
}

func (m *FetchDisksRequest) Reset()         { *m = FetchDisksRequest{} }
func (m *FetchDisksRequest) String() string { return proto1.CompactTextString(m) }
func (*FetchDisksRequest) ProtoMessage()    {}

type FetchDisksReply struct {
	Disks []*DiskInfo `protobuf:"bytes,1,rep,name=disks" json:"disks,omitempty"`
}

func (m *FetchDisksReply) Reset()         { *m = FetchDisksReply{} }
func (m *FetchDisksReply) String() string { return proto1.CompactTextString(m) }
func (*FetchDisksReply) ProtoMessage()    {}

func (m *FetchDisksReply) GetDisks() []*DiskInfo {
	if m != nil {
		return m.Disks
	}
	return nil
}

type DiskInfo struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Remote string `protobuf:"bytes,2,opt,name=remote" json:"remote,omitempty"`
	Port   int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
}

func (m *DiskInfo) Reset()         { *m = DiskInfo{} }
func (m *DiskInfo) String() string { return proto1.CompactTextString(m) }
func (*DiskInfo) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Name service

type NameClient interface {
	FetchDisks(ctx context.Context, in *FetchDisksRequest, opts ...grpc.CallOption) (*FetchDisksReply, error)
}

type nameClient struct {
	cc *grpc.ClientConn
}

func NewNameClient(cc *grpc.ClientConn) NameClient {
	return &nameClient{cc}
}

func (c *nameClient) FetchDisks(ctx context.Context, in *FetchDisksRequest, opts ...grpc.CallOption) (*FetchDisksReply, error) {
	out := new(FetchDisksReply)
	err := grpc.Invoke(ctx, "/proto.name/FetchDisks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Name service

type NameServer interface {
	FetchDisks(context.Context, *FetchDisksRequest) (*FetchDisksReply, error)
}

func RegisterNameServer(s *grpc.Server, srv NameServer) {
	s.RegisterService(&_Name_serviceDesc, srv)
}

func _Name_FetchDisks_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FetchDisksRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NameServer).FetchDisks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Name_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.name",
	HandlerType: (*NameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchDisks",
			Handler:    _Name_FetchDisks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
